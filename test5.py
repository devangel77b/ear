#!/bin/env python

import json
import drawsvg

# file metadata
FM = dict()
FM['file_spec'] = 1
FM['file_creator'] = "Python 3.13"
FM['file_author'] = "Dennis Evangelista"
FM['file_classes'] = ["singleModel"] 




G = dict()

# frame metadata
G['frame_title'] = "miura cp"
G['frame_classes'] = ["creasePattern"]
G['frame_attributes'] = ["2D"]
G['frame_unit'] = "unit" #in, pt, m, cm, mm, um, nm

# actual mesh geometry and topology data
G['vertices_coords']=[[0.333,0],[1.333,0.4],[2.333,0],[3.333,0.4],[4.333,0],[5.333,0.4],[6.333,0],[7.333,0.4],[8.333,0],[0.17992066785409055,1],[1.1799206678540906,1.4],[2.1799206678540903,1],[3.1799206678540903,1.4],[4.17992066785409,1],[5.17992066785409,1.4],[6.17992066785409,1],[7.17992066785409,1.4],[8.179920667854091,1],[-0.13857689657019842,2],[0.8614231034298016,2.4],[1.8614231034298017,2],[2.8614231034298014,2.4],[3.8614231034298014,2],[4.861423103429802,2.4],[5.861423103429802,2],[6.861423103429802,2.4],[7.861423103429802,2],[-0.32966750136794837,3],[0.6703324986320516,3.4],[1.6703324986320516,3],[2.670332498632052,3.4],[3.670332498632052,3],[4.670332498632051,3.4],[5.670332498632051,3],[6.670332498632051,3.4],[7.670332498632051,3],[-0.2176633257475828,4],[0.7823366742524172,4.4],[1.7823366742524172,4],[2.7823366742524174,4.4],[3.7823366742524174,4],[4.782336674252417,4.4],[5.782336674252417,4],[6.782336674252417,4.4],[7.782336674252417,4],[0.09445950775925435,5],[1.0944595077592543,5.4],[2.0944595077592543,5],[3.0944595077592543,5.4],[4.094459507759255,5],[5.094459507759255,5.4],[6.094459507759255,5],[7.094459507759255,5.4],[8.094459507759254,5],[0.3197367054545719,6],[1.319736705454572,6.4],[2.319736705454572,6],[3.319736705454572,6.4],[4.319736705454572,6],[5.319736705454572,6.4],[6.319736705454572,6],[7.319736705454572,6.4],[8.319736705454572,6],[0.25104945069632045,7],[1.2510494506963203,7.4],[2.2510494506963203,7],[3.2510494506963203,7.4],[4.25104945069632,7],[5.25104945069632,7.4],[6.25104945069632,7],[7.25104945069632,7.4],[8.251049450696321,7],[-0.04845151125826831,8],[0.9515484887417317,8.4],[1.9515484887417316,8],[2.951548488741732,8.4],[3.951548488741732,8],[4.951548488741731,8.4],[5.951548488741731,8],[6.951548488741731,8.4],[7.951548488741731,8]]
G['edges_vertices']=[[0,9],[1,10],[2,11],[3,12],[4,13],[5,14],[6,15],[7,16],[8,17],[9,18],[10,19],[11,20],[12,21],[13,22],[14,23],[15,24],[16,25],[17,26],[18,27],[19,28],[20,29],[21,30],[22,31],[23,32],[24,33],[25,34],[26,35],[27,36],[28,37],[29,38],[30,39],[31,40],[32,41],[33,42],[34,43],[35,44],[36,45],[37,46],[38,47],[39,48],[40,49],[41,50],[42,51],[43,52],[44,53],[45,54],[46,55],[47,56],[48,57],[49,58],[50,59],[51,60],[52,61],[53,62],[54,63],[55,64],[56,65],[57,66],[58,67],[59,68],[60,69],[61,70],[62,71],[63,72],[64,73],[65,74],[66,75],[67,76],[68,77],[69,78],[70,79],[71,80],[0,1],[1,2],[2,3],[3,4],[4,5],[5,6],[6,7],[7,8],[9,10],[10,11],[11,12],[12,13],[13,14],[14,15],[15,16],[16,17],[18,19],[19,20],[20,21],[21,22],[22,23],[23,24],[24,25],[25,26],[27,28],[28,29],[29,30],[30,31],[31,32],[32,33],[33,34],[34,35],[36,37],[37,38],[38,39],[39,40],[40,41],[41,42],[42,43],[43,44],[45,46],[46,47],[47,48],[48,49],[49,50],[50,51],[51,52],[52,53],[54,55],[55,56],[56,57],[57,58],[58,59],[59,60],[60,61],[61,62],[63,64],[64,65],[65,66],[66,67],[67,68],[68,69],[69,70],[70,71],[72,73],[73,74],[74,75],[75,76],[76,77],[77,78],[78,79],[79,80]]
G['edges_assignment']=["B","M","V","M","V","M","V","M","B","B","V","M","V","M","V","M","V","B","B","M","V","M","V","M","V","M","B","B","V","M","V","M","V","M","V","B","B","M","V","M","V","M","V","M","B","B","V","M","V","M","V","M","V","B","B","M","V","M","V","M","V","M","B","B","V","M","V","M","V","M","V","B","B","B","B","B","B","B","B","B","V","V","V","V","V","V","V","V","M","M","M","M","M","M","M","M","V","V","V","V","V","V","V","V","M","M","M","M","M","M","M","M","V","V","V","V","V","V","V","V","M","M","M","M","M","M","M","M","V","V","V","V","V","V","V","V","B","B","B","B","B","B","B","B"]

# output as a FOLD file, e.g. json 
with open("test5.fold",'w') as handle:
    json.dump(FM | G, handle)
# this part seems to work




# output as a svg
# here i am using Group to get Line for markings, scoring, or cutting
# TBD how to handle interior cuts and joins
D = drawsvg.Drawing(width=1,height=1)
reds = drawsvg.Group(id='mountain')
for i,a in enumerate(G['edges_assignment']):
    if a=="M":
        v = G['edges_vertices'][i]
        reds.append(drawsvg.Line(G['vertices_coords'][v[0]][0],
                                 G['vertices_coords'][v[0]][1],
                                 G['vertices_coords'][v[1]][0],
                                 G['vertices_coords'][v[1]][1],
                                 stroke='red',
                                 stroke_width=0.01,
                                 ))
D.append(reds)
blues = drawsvg.Group(id='valley')
for i,a in enumerate(G['edges_assignment']):
    if a=="V":
        v = G['edges_vertices'][i]
        blues.append(drawsvg.Line(G['vertices_coords'][v[0]][0],
                                  G['vertices_coords'][v[0]][1],
                                  G['vertices_coords'][v[1]][0],
                                  G['vertices_coords'][v[1]][1],
                                  stroke='blue',
                                  stroke_width=0.01,
                                  ))
D.append(blues)
scores = drawsvg.Group(id='score')
for i,a in enumerate(G['edges_assignment']):
    if a in ['M','V','F','U']:
        v = G['edges_vertices'][i]
        scores.append(drawsvg.Line(G['vertices_coords'][v[0]][0],
                                   G['vertices_coords'][v[0]][1],
                                   G['vertices_coords'][v[1]][0],
                                   G['vertices_coords'][v[1]][1],
                                   stroke='black',
                                   stroke_width=0.01,
                                   ))
D.append(scores)
cuts = drawsvg.Group(id='cut')
for i,a in enumerate(G['edges_assignment']):
    if a in ['B','C','J']:
        v = G['edges_vertices'][i]
        cuts.append(drawsvg.Line(G['vertices_coords'][v[0]][0],
                                 G['vertices_coords'][v[0]][1],
                                 G['vertices_coords'][v[1]][0],
                                 G['vertices_coords'][v[1]][1],
                                 stroke='black',
                                 stroke_width=0.01,
                                 ))
D.append(cuts)
D.set_render_size('8.5in','8.5in') # TBD need better way to do scaling
D.save_svg('test5.svg')
